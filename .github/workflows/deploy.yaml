name: deploy-rvc

on:
  push:
    branches: main
    paths:
      - ".github/workflows/deploy.yaml"
      - "Makefile"
      - "cmd/**"
      - "go.mod"
      - "go.sum"
      - "pkg/**"
      - "serverless.yml"
      - "vendor/**"

permissions:
  id-token: write
  contents: write

jobs:
  deploy:
    name: deploy-rvc
    runs-on: ubuntu-latest
    steps:
      - name: Get AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.SERVERLESS_AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Create draft release
        id: create_release
        uses: release-drafter/release-drafter@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish release
        run: |
          curl -X PATCH \
          -H 'Accept: application/vnd.github.v3+json' \
          -H 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
          --url https://api.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }} \
          -d '{"draft":false}' \
          --fail
      - name: Setup golang
        uses: actions/setup-go@v5
        with:
          go-version: "1.17"
      - name: Build
        run: |
          make
      - name: Upload binaries
        run: |
          curl -X POST \
            -H 'Accept: application/vnd.github.v3+json' \
            -H 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            -H 'Content-Type: application/octet-stream' \
            --url https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }}/assets?name=rvc \
            --data-binary @bin/rvc \
            --fail
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Install serverless and deploy
        run: |
          npm install -g serverless@3
          serverless plugin install -n serverless-domain-manager
          serverless deploy
