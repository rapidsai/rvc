name: deploy-rvc

on:
  pull_request:
  workflow_dispatch:
  push:
    branches:
      - "pull-request/[0-9]+"
      - "main"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  id-token: write
  contents: write

jobs:
  deploy:
    name: Deploy RVC Application
    runs-on: ubuntu-latest
    steps:
      - name: Get AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.SERVERLESS_AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create draft release
        if: github.ref == 'refs/heads/main'
        id: create_release
        uses: release-drafter/release-drafter@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish release
        if: github.ref == 'refs/heads/main'
        run: |
          curl -X PATCH \
          -H 'Accept: application/vnd.github.v3+json' \
          -H 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
          --url https://api.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }} \
          -d '{"draft":false}' \
          --fail

      - name: Setup golang
        uses: actions/setup-go@v5
        with:
          go-version: "1.17"

      - name: Build
        run: make

      - name: Create zip for Lambda
        working-directory: bin
        run: |
          zip rvc_serverless.zip bootstrap

      - name: Upload binaries
        if: github.ref == 'refs/heads/main'
        run: |
          curl -X POST \
            -H 'Accept: application/vnd.github.v3+json' \
            -H 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            -H 'Content-Type: application/octet-stream' \
            --url https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }}/assets?name=rvc \
            --data-binary @bin/rvc \
            --fail

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.9.2"

      - name: Terraform Format Check
        working-directory: terraform
        run: terraform fmt -check

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Terraform Validate
        working-directory: terraform
        run: terraform validate

      - name: Terraform Plan
        id: plan
        working-directory: terraform
        run: |
          terraform plan -out=tfplan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        working-directory: terraform
        run: terraform apply tfplan
